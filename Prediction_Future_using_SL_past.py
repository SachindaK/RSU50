# -*- coding: utf-8 -*-
"""RSU50 Sachinda Prediction (Future - Using SL Past) Full

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AbRXhx-WoeC2EuHZpB7UQBCKglNwUA7_
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
import warnings
warnings.filterwarnings('ignore')

from statsmodels.tsa.arima.model import ARIMA

# Load textile export and reserve data
textile_exports_df = pd.read_excel('/content/drive/MyDrive/RSU50 DataFiles/Textile_Exports.xlsx')  # Load textile export data
reserve_df = pd.read_excel('/content/drive/MyDrive/RSU50 DataFiles/Reserve.xlsx')  # Load reserve data

# Merge datasets on 'Country' and 'Year', and only include years 1990-2018
merged_data = pd.merge(textile_exports_df, reserve_df, on=['Country', 'Year'])
merged_data = merged_data[(merged_data['Year'] >= 1990) & (merged_data['Year'] <= 2018)]

# Rename columns for easier access
merged_data.rename(columns={
    'Textiles and Clothing Export (US$ Thousand)': 'Textile_Exports',
    'Total reserves (includes gold, current US$) [FI.RES.TOTL.CD]': 'Reserves'
}, inplace=True)

# Ensure data is sorted by Country and Year
merged_data.sort_values(by=['Country', 'Year'], inplace=True)

# List of countries of interest
countries_of_interest = ['Sri Lanka', 'Malaysia', 'Thailand', 'Vietnam']

# Exclude Sri Lanka to compute average growth rates of comparator countries
comparator_countries = ['Malaysia', 'Thailand', 'Vietnam']

# Filter data for the countries of interest
df_filtered = merged_data[merged_data['Country'].isin(countries_of_interest)].copy()

df_filtered.head()

# Get Sri Lanka's data
df_sri_lanka = df_filtered[df_filtered['Country'] == 'Sri Lanka'].copy()

# Ensure 'Year' is set as the index for time series analysis
df_sri_lanka.set_index('Year', inplace=True)

# Convert the 'Year' index to datetime format
df_sri_lanka.index = pd.to_datetime(df_sri_lanka.index, format='%Y')

"""#Exploratory Data Analysis (EDA)"""

df_sri_lanka['Textile_Exports_Million'] = df_sri_lanka['Textile_Exports'] / 1000

plt.figure(figsize=(12, 6))
plt.plot(df_sri_lanka.index.year, df_sri_lanka['Textile_Exports_Million'], marker='o')
plt.title('Sri Lanka Textile Exports Over Time')
plt.xlabel('Year')
plt.ylabel('Textile Exports (US$ Million)')
plt.grid(True)
plt.gca().yaxis.set_major_formatter(mtick.StrMethodFormatter('{x:,.0f}'))
plt.show()

result = adfuller(df_sri_lanka['Textile_Exports_Million'])
print('ADF Statistic:', result[0])
print('p-value:', result[1])

# p-value is grater than 0.05. That means the series is non-stationary
df_sri_lanka['Diff_Exports'] = df_sri_lanka['Textile_Exports_Million'].diff().dropna()

# Re-run the ADF test
result_diff = adfuller(df_sri_lanka['Diff_Exports'].dropna())
print('ADF Statistic (Differenced Series):', result_diff[0])
print('p-value:', result_diff[1])

"""#Model Selection"""

# Plot ACF and PACF for the differenced series
fig, axes = plt.subplots(1, 2, figsize=(15, 4))
plot_acf(df_sri_lanka['Diff_Exports'].dropna(), ax=axes[0])
plot_pacf(df_sri_lanka['Diff_Exports'].dropna(), ax=axes[1])
plt.show()

# Define the model
model = ARIMA(df_sri_lanka['Textile_Exports_Million'], order=(1, 1, 1))

# Fit the model
model_fit = model.fit()

# Summary of the model
print(model_fit.summary())

# Plot residuals
residuals = model_fit.resid
plt.figure(figsize=(12, 6))
plt.plot(residuals)
plt.title('Residuals of the ARIMA Model')
plt.show()

# Plot histogram of residuals
residuals.plot(kind='kde')
plt.title('Density of Residuals')
plt.show()

from statsmodels.stats.diagnostic import acorr_ljungbox

lb_test = acorr_ljungbox(residuals, lags=[10], return_df=True)
print(lb_test)

df_sri_lanka

# Forecast the in-sample period
in_sample_forecast = model_fit.predict(start=df_sri_lanka.index[1], end=df_sri_lanka.index[-1], typ='levels')

# Plot actual vs. fitted values
plt.figure(figsize=(12, 6))
plt.plot(df_sri_lanka.index, df_sri_lanka['Textile_Exports_Million'], label='Actual')
plt.plot(in_sample_forecast.index, in_sample_forecast, label='Fitted')
plt.title('Actual vs. Fitted Values')
plt.xlabel('Year')
plt.ylabel('Textile Exports (US$ Million)')
plt.legend()
plt.grid(True)
plt.gca().yaxis.set_major_formatter(mtick.StrMethodFormatter('{x:,.0f}'))
plt.show()

"""#Forecasting Future Exports"""

# Forecast the next 5 years
forecast_steps = 5
forecast = model_fit.get_forecast(steps=forecast_steps)
forecast_index = pd.date_range(start=df_sri_lanka.index[-1] + pd.DateOffset(years=1), periods=forecast_steps, freq='AS')
forecast_series = pd.Series(forecast.predicted_mean.values, index=forecast_index)

# Confidence intervals
conf_int = forecast.conf_int()
conf_int_index = pd.date_range(start=df_sri_lanka.index[-1] + pd.DateOffset(years=1), periods=forecast_steps, freq='AS')

# Plot forecast
plt.figure(figsize=(12, 6))
plt.plot(df_sri_lanka.index.year, df_sri_lanka['Textile_Exports_Million'], label='Actual')
plt.plot(forecast_series.index.year, forecast_series, label='Forecast', marker='o')
plt.fill_between(conf_int_index.year, conf_int['lower Textile_Exports_Million'], conf_int['upper Textile_Exports_Million'], color='pink', alpha=0.3)
plt.title('Textile Exports Forecast for Sri Lanka')
plt.xlabel('Year')
plt.ylabel('Textile Exports (US$ Million)')
plt.legend()
plt.grid(True)
plt.gca().yaxis.set_major_formatter(mtick.StrMethodFormatter('{x:,.0f}'))
plt.show()

"""#Scenario Analysis

Optimistic Growth Rate: Average growth rate of comparator countries.

Pessimistic Growth Rate: Lower than historical growth rate.

Baseline Growth Rate: As per ARIMA model forecast.
"""

# Calculate historical annual growth rate for Sri Lanka
df_sri_lanka['Growth_Rate'] = df_sri_lanka['Textile_Exports'].pct_change() * 100
historical_growth_rate = df_sri_lanka['Growth_Rate'].mean()
print(f"Historical Average Growth Rate: {historical_growth_rate:.2f}%")

# Assume optimistic growth rate is higher by a certain percentage
optimistic_growth_rate = historical_growth_rate + 2  # e.g., 2% higher
pessimistic_growth_rate = historical_growth_rate - 2  # e.g., 2% lower

# Get the last known export value
last_export = df_sri_lanka['Textile_Exports_Million'][-1]

# Create a DataFrame for scenarios
future_years = [year.year for year in forecast_index]
scenarios_df = pd.DataFrame({'Year': future_years})
scenarios_df.set_index('Year', inplace=True)

# Baseline Forecast (from ARIMA model)
scenarios_df['Baseline'] = forecast_series.values

# Optimistic Scenario
scenarios_df['Optimistic'] = [last_export * ((1 + optimistic_growth_rate / 100) ** i) for i in range(1, forecast_steps + 1)]

# Pessimistic Scenario
scenarios_df['Pessimistic'] = [last_export * ((1 + pessimistic_growth_rate / 100) ** i) for i in range(1, forecast_steps + 1)]

# Combine with historical data for plotting
historical_exports = df_sri_lanka['Textile_Exports_Million'][-5:]  # Last 5 years for context
combined_exports = pd.concat([historical_exports, scenarios_df['Baseline']])

# Plot the scenarios
plt.figure(figsize=(12, 6))
plt.plot(historical_exports.index.year, historical_exports.values, label='Historical Exports', marker='o')
plt.plot(scenarios_df.index, scenarios_df['Baseline'], label='Baseline Forecast', marker='o')
plt.plot(scenarios_df.index, scenarios_df['Optimistic'], label='Optimistic Scenario', marker='o')
plt.plot(scenarios_df.index, scenarios_df['Pessimistic'], label='Pessimistic Scenario', marker='o')
plt.title('Textile Exports Forecast Under Different Scenarios')
plt.xlabel('Year')
plt.ylabel('Textile Exports (US$ Million)')
plt.legend()
plt.grid(True)
plt.gca().yaxis.set_major_formatter(mtick.StrMethodFormatter('{x:,.0f}'))
plt.show()